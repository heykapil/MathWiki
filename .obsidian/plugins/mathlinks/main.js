/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin:
https://github.com/zhaoshenzhai/obsidian-mathlinks
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  templates: [],
  excludedFilePaths: [],
  blockPrefix: "^",
  enableFileNameBlockLinks: true,
  enableAPI: true
};
var MathLinksSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    return __async(this, null, function* () {
      const { containerEl } = this;
      containerEl.empty();
      containerEl.createEl("h2", { text: "MathLinks Settings" });
      new import_obsidian.Setting(containerEl).setName("Add a new template").setDesc(createFragment((e) => {
        e.createSpan({ text: "Generate mathLinks with a new template. Use " });
        e.createEl("code", { text: "mathLink: auto" });
        e.createSpan({ text: " to use templates in a file." });
      })).addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddTemplatesModal(this.app, this.plugin.settings.templates);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              this.plugin.settings.templates.push(modal.newTemplate);
              yield this.plugin.saveSettings();
              new import_obsidian.Notice("MathLinks: Template added");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let templateTitle;
      new import_obsidian.Setting(containerEl).setName("Edit/delete template").setDesc("Select a template to edit/delete it.").addDropdown((dropdown) => {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.templates.forEach((template) => {
          dropdown.addOption(template.title, template.title);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            templateTitle = current;
          else
            templateTitle = null;
        }));
      }).addExtraButton((button) => {
        let b = button.setTooltip("Edit").setIcon("edit").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let originalTemplates = JSON.parse(JSON.stringify(this.plugin.settings.templates));
            let modal = new EditTemplatesModal(this.app, templateTitle, this.plugin.settings.templates);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                yield this.plugin.saveSettings();
                new import_obsidian.Notice("MathLinks: Template saved");
              } else {
                this.plugin.settings.templates = originalTemplates;
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template");
          }
        }));
        return b;
      }).addExtraButton((button) => {
        let b = button.setTooltip("Delete").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let modal = new ConfirmModal(this.app, `Are you sure you want to delete "${templateTitle}"?`, "Yes", "No");
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.templates.length; i++) {
                  if (this.plugin.settings.templates[i].title == templateTitle) {
                    this.plugin.settings.templates.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: Template "${templateTitle}" deleted`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template");
          }
        }));
        return b;
      });
      new import_obsidian.Setting(containerEl).setName("Add an excluded file").setDesc("MathLinks will ignore those files.").addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddExcludedModal(this.app, this.plugin.settings.excludedFilePaths);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              this.plugin.settings.excludedFilePaths.push(modal.newExcludedFilePath);
              yield this.plugin.saveSettings();
              if (modal.newExcludedFilePath.isFile)
                new import_obsidian.Notice("MathLinks: File excluded");
              else
                new import_obsidian.Notice("MathLinks: Path exclcuded");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let excludedFilePath;
      new import_obsidian.Setting(containerEl).setName("Remove from excluded files").setDesc("Remove a file from the list of excluded files.").addDropdown((dropdown) => __async(this, null, function* () {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.excludedFilePaths.forEach((excludedFilePath2) => {
          dropdown.addOption(excludedFilePath2.path, excludedFilePath2.path);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            excludedFilePath = current;
          else
            excludedFilePath = null;
        }));
      })).addExtraButton((button) => {
        let b = button.setTooltip("Remove").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (excludedFilePath) {
            let modal = new ConfirmModal(this.app, `Are you sure you want to remove "${excludedFilePath}" from the list of excluded files/paths?`, "Yes", "No");
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.excludedFilePaths.length; i++) {
                  if (this.plugin.settings.excludedFilePaths[i].path == excludedFilePath) {
                    this.plugin.settings.excludedFilePaths.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: "${excludedFilePath}" removed from excluded files`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a file");
          }
        }));
        return b;
      });
      let prefix;
      new import_obsidian.Setting(containerEl).setName("Edit prefix for block links").setDesc(createFragment((e) => {
        e.createSpan({ text: "Links like " });
        e.createEl("code", { text: "note#^block-id" });
        e.createSpan({ text: " will be rendered as" });
        if (this.plugin.settings.enableFileNameBlockLinks) {
          e.createEl("code", { text: "note > " + this.plugin.settings.blockPrefix + "block-id" });
        } else {
          e.createEl("code", { text: this.plugin.settings.blockPrefix + "block-id" });
        }
        e.createSpan({ text: "." });
      })).addText((text) => {
        prefix = text;
        prefix.setValue(this.plugin.settings.blockPrefix).onChange((current) => __async(this, null, function* () {
          this.plugin.settings.blockPrefix = current;
          yield this.plugin.saveSettings();
        }));
        prefix.setPlaceholder("No prefix");
      }).addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.enableFileNameBlockLinks).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.enableFileNameBlockLinks = value;
          yield this.plugin.saveSettings();
        }));
        toggle.setTooltip("Disable to ignore note name.");
      });
      new import_obsidian.Setting(containerEl).setName("Enable MathLinks API").setDesc(createFragment((e) => {
        let accounts = this.plugin.apiAccounts;
        e.createSpan({ text: "Allow other community plugins to use MathLinks." });
        if (accounts.length) {
          let list = e.createEl("ul");
          for (let account of accounts) {
            list.createEl("li", { text: account.manifest.name });
          }
        }
      })).addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.enableAPI).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.enableAPI = value;
          yield this.plugin.saveSettings();
        }));
      });
    });
  }
};
var AddTemplatesModal = class extends import_obsidian.Modal {
  constructor(app2, templates) {
    super(app2);
    this.saved = false;
    this.error = ["MathLinks: Please enter a title", "MathLinks: Please enter a non-empty string to be replaced"];
    this.templates = [];
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    loadTemplateSettings(contentEl, this.newTemplate, this);
    loadButtonsToClose(this, this.contentEl.createDiv(), "Add", "Cancel");
  }
};
var EditTemplatesModal = class extends import_obsidian.Modal {
  constructor(app2, templateTitle, templates) {
    super(app2);
    this.saved = false;
    this.error = ["", ""];
    this.templateTitle = templateTitle;
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.templates.every((template) => {
      if (this.templateTitle != void 0 && template.title == this.templateTitle) {
        loadTemplateSettings(contentEl, template, this);
        return false;
      }
      return true;
    });
    loadButtonsToClose(this, this.contentEl.createDiv(), "Save", "Cancel");
  }
};
var AddExcludedModal = class extends import_obsidian.Modal {
  constructor(app2, excludedFilePaths) {
    super(app2);
    this.saved = false;
    this.error = ["MathLinks: Please enter a valid file/path", ""];
    this.excludedFilePaths = excludedFilePaths;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    let excludedFilePathText;
    new import_obsidian.Setting(contentEl).setName("File name/path of folder").setDesc(createFragment((e) => {
      e.createSpan({ text: "Enter a file as" });
      e.createEl("code", { text: "path/name.md" });
      e.createSpan({ text: " and a folder as " });
      e.createEl("code", { text: "path" });
      e.createSpan({ text: "." });
    })).addText((text) => {
      excludedFilePathText = text;
      let footerEl = this.contentEl.createDiv();
      loadButtonsToClose(this, footerEl, "Add", "Cancel");
      excludedFilePathText.onChange((current) => {
        let file = app.vault.getAbstractFileByPath(current);
        if (file != null) {
          this.newExcludedFilePath = { path: file.path, isFile: file instanceof import_obsidian.TFile };
          this.error[0] = "";
        } else {
          this.error[0] = "MathLinks: Please enter a valid file/path";
        }
        this.error[1] = "";
        this.excludedFilePaths.every((filePath) => {
          if (filePath.path == current) {
            this.error[1] = "MathLinks: Duplicate file/path";
            return false;
          }
          return true;
        });
        footerEl.empty();
        loadButtonsToClose(this, footerEl, "Add", "Cancel");
      });
    });
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app2, areYouSure, proceed, noProceed) {
    super(app2);
    this.saved = false;
    this.error = [];
    this.areYouSure = areYouSure;
    this.proceed = proceed;
    this.noProceed = noProceed;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", { text: this.areYouSure });
    loadButtonsToClose(this, this.contentEl.createDiv(), this.proceed, this.noProceed);
  }
};
function loadTemplateSettings(contentEl, template, modal) {
  let titleText;
  new import_obsidian.Setting(contentEl).setName("Title").setDesc("Name of the template.").addText((text) => {
    titleText = text;
    titleText.setValue(template.title).onChange((current) => {
      template.title = current;
      modal.error[0] = "";
      if (modal instanceof AddTemplatesModal) {
        modal.templates.every((t) => {
          if (template.title != "" && template.title == t.title) {
            modal.error[0] = "MathLinks: Duplicate title";
            return false;
          }
          return true;
        });
      }
      if (template.title == "") {
        modal.error[0] = "MathLinks: Please enter a title";
      }
    });
  });
  let replacedText;
  new import_obsidian.Setting(contentEl).setName("Match for...").setDesc("String to be matched and replaced. Do not include regex.").addText((text) => {
    replacedText = text;
    replacedText.setValue(template.replaced).onChange((current) => {
      template.replaced = current;
      modal.error[1] = "";
      if (template.replaced == "") {
        modal.error[1] = "MathLinks: Please enter a non-empty string to be replaced";
      }
    });
  });
  let replacementText;
  new import_obsidian.Setting(contentEl).setName("Replace with...").setDesc("String to replace matches. Do not escape backslashes.").addText((text) => {
    replacementText = text;
    replacementText.setValue(template.replacement).onChange((current) => {
      template.replacement = current;
    });
  });
  new import_obsidian.Setting(contentEl).setName("Global match").setDesc("Match all instances (instead of just the first).").addToggle((toggle) => {
    toggle.setValue(template.globalMatch).onChange((current) => template.globalMatch = current);
  });
  new import_obsidian.Setting(contentEl).setName("Case sensitive").setDesc("Matches will be case sensitive.").addToggle((toggle) => {
    toggle.setValue(template.sensitive).onChange((current) => template.sensitive = current);
  });
  new import_obsidian.Setting(contentEl).setName("Match whole words").setDesc("Only match whole words.").addToggle((toggle) => {
    toggle.setValue(template.word).onChange((current) => template.word = current);
  });
}
function loadButtonsToClose(modal, element, trueToolTip, falseToolTip) {
  let footerButtons = new import_obsidian.Setting(element);
  footerButtons.addButton((b) => {
    b.setTooltip(trueToolTip).setIcon("checkmark").onClick(() => __async(this, null, function* () {
      let proceed = modal.error.every((error) => {
        if (error != "") {
          return false;
        }
        return true;
      });
      if (!proceed) {
        modal.error.forEach((error) => {
          if (error != "") {
            new import_obsidian.Notice(error);
          }
        });
      } else {
        modal.saved = true;
        modal.close();
      }
    }));
  });
  footerButtons.addExtraButton((b) => {
    b.setTooltip(falseToolTip).setIcon("cross").onClick(() => __async(this, null, function* () {
      modal.saved = false;
      modal.close();
    }));
  });
}

// src/api.ts
var import_obsidian2 = require("obsidian");
var MathLinksAPIAccount = class {
  constructor(plugin, manifest, blockPrefix, enableFileNameBlockLinks) {
    this.plugin = plugin;
    this.manifest = manifest;
    this.blockPrefix = blockPrefix;
    this.enableFileNameBlockLinks = enableFileNameBlockLinks;
    this.metadataSet = {};
  }
  get(path, blockID) {
    let metadata = this.metadataSet[path];
    if (metadata) {
      if (blockID === void 0) {
        return metadata["mathLink"];
      }
      let blocks = metadata["mathLink-blocks"];
      if (blocks) {
        return blocks[blockID];
      }
    }
  }
  update(path, newMetadata) {
    let file = this.plugin.app.vault.getAbstractFileByPath(path);
    if (file instanceof import_obsidian2.TFile && file.extension == "md") {
      this.metadataSet[path] = Object.assign({}, this.metadataSet[path], newMetadata);
      informChange(this.plugin.app, "mathlinks:updated", this, path);
    } else {
      throw Error(`MathLinks API: Invalid path: ${path}`);
    }
  }
  delete(path, which) {
    let metadata = this.metadataSet[path];
    if (metadata) {
      if (which === void 0) {
        delete this.metadataSet[path];
      } else if (which == "mathLink" || which == "mathLink-blocks") {
        if (metadata[which] !== void 0) {
          delete metadata[which];
        } else {
          throw Error(`MathLinks API: MathLinksMetadata of type "${which}" does not exist for ${path}`);
        }
      } else {
        let blocks = metadata["mathLink-blocks"];
        if (blocks && blocks[which] !== void 0) {
          delete blocks[which];
        } else {
          throw Error(`MathLinks API: MathLinksMetadata for ${path}#^${which}" does not exist`);
        }
      }
    } else {
      throw Error(`MathLinks API: MathLinksMetadata for ${path} does not exist`);
    }
    informChange(this.plugin.app, "mathlinks:updated", this, path);
  }
};
function informChange(app2, eventName, ...callbackArgs) {
  app2.metadataCache.trigger(eventName, ...callbackArgs);
  app2.workspace.iterateRootLeaves((leaf) => {
    var _a;
    if (leaf.view instanceof import_obsidian2.MarkdownView && leaf.view.getMode() == "source") {
      (_a = leaf.view.editor.cm) == null ? void 0 : _a.dispatch();
    }
  });
}

// src/links.ts
var import_obsidian3 = require("obsidian");

// src/utils.ts
function isValid(plugin, fileName) {
  if (fileName.endsWith(".canvas"))
    return true;
  for (let i = 0; i < plugin.settings.excludedFilePaths.length; i++) {
    let path = plugin.settings.excludedFilePaths[i];
    if (path.isFile && fileName == path.path) {
      return false;
    } else if (!path.isFile) {
      let pathRegex = new RegExp(`\\b${path.path}/`);
      if (pathRegex.test(fileName))
        return false;
    }
  }
  return true;
}
function translateLink(targetLink) {
  var _a;
  function translateLinkImpl(targetLink2, pattern) {
    let result = pattern.exec(targetLink2);
    if (result)
      return (result[1] ? `${result[1]} > ` : "") + `${result[2]}`;
  }
  let headingPattern = /(^.*)#([^\^].*)/;
  let blockPattern = /(^.*)#(\^[a-zA-Z0-9\-]+)/;
  let translatedAsHeading = translateLinkImpl(targetLink, headingPattern);
  let translatedAsBlock = translateLinkImpl(targetLink, blockPattern);
  return (_a = translatedAsHeading != null ? translatedAsHeading : translatedAsBlock) != null ? _a : "";
}

// src/links.ts
var MathLinksRenderChild = class extends import_obsidian3.MarkdownRenderChild {
  constructor(containerEl, plugin, sourcePath, targetLink, displayText) {
    var _a;
    super(containerEl);
    this.plugin = plugin;
    this.sourcePath = sourcePath;
    this.targetLink = targetLink;
    this.displayText = displayText;
    this.targetFile = this.plugin.app.metadataCache.getFirstLinkpathDest((0, import_obsidian3.getLinkpath)(this.targetLink), this.sourcePath);
    this.mathLinkEl = this.containerEl.cloneNode(true);
    this.mathLinkEl.textContent = "";
    (_a = this.containerEl.parentNode) == null ? void 0 : _a.insertBefore(this.mathLinkEl, this.containerEl.nextSibling);
    this.mathLinkEl.classList.add("mathLink-internal-link");
    this.containerEl.classList.add("original-internal-link");
    this.containerEl.style.display = "none";
    this.getMathLink = this.setMathLinkGetter();
  }
  onload() {
    this.update();
    this.plugin.registerEvent(this.plugin.app.metadataCache.on("changed", (changedFile) => {
      if (!this.targetFile || this.targetFile == changedFile) {
        this.update();
      }
    }));
    this.plugin.registerEvent(this.plugin.app.metadataCache.on("mathlinks:updated", (apiAccount, changedFilePath) => {
      if (!this.targetFile || this.targetFile.path == changedFilePath) {
        this.update();
      }
    }));
    this.plugin.registerEvent(this.plugin.app.metadataCache.on("mathlinks:account-deleted", (apiAccount) => {
      this.update();
    }));
  }
  setMathLinkGetter() {
    var _a;
    let getter = () => "";
    if (this.displayText != this.targetLink && this.displayText != translateLink(this.targetLink)) {
      getter = () => this.displayText;
    } else {
      const targetName = (_a = this.targetFile) == null ? void 0 : _a.basename;
      if (this.displayText == targetName || this.displayText == translateLink(this.targetLink)) {
        getter = () => getMathLink(this.plugin, this.targetLink, this.sourcePath);
      }
    }
    return getter;
  }
  update() {
    return __async(this, null, function* () {
      const mathLink = this.getMathLink();
      if (mathLink) {
        setMathLink(mathLink, this.mathLinkEl);
      } else {
        setMathLink(this.displayText, this.mathLinkEl);
      }
    });
  }
};
function generateMathLinks(plugin, element, context) {
  var _a, _b;
  for (let targetEl of element.querySelectorAll(".internal-link")) {
    if (targetEl.classList.contains("mathLink-internal-link")) {
      targetEl.remove();
      let queryResult = element.querySelector(".original-internal-link");
      if (queryResult) {
        targetEl = queryResult;
        targetEl.classList.remove("original-internal-link");
        targetEl.style.display = "";
      }
    }
    const targetDisplay = (_a = targetEl.textContent) == null ? void 0 : _a.trim();
    if (targetDisplay != "" && !/math-inline is-loaded/.test(targetEl.innerHTML)) {
      const targetLink = (_b = targetEl.getAttribute("data-href")) == null ? void 0 : _b.replace(/\.md/, "");
      if (targetLink) {
        const targetFile = plugin.app.metadataCache.getFirstLinkpathDest((0, import_obsidian3.getLinkpath)(targetLink), context.sourcePath);
        if (targetDisplay && targetFile) {
          const child = new MathLinksRenderChild(targetEl, plugin, context.sourcePath, targetLink, targetDisplay);
          context.addChild(child);
        }
      }
    }
  }
}
function setMathLink(source, mathLinkEl) {
  mathLinkEl.replaceChildren();
  const mathPattern = /\$(.*?[^\s])\$/g;
  let textFrom = 0, textTo = 0;
  let result;
  while ((result = mathPattern.exec(source)) !== null) {
    const mathString = result[1];
    textTo = result.index;
    if (textTo > textFrom)
      mathLinkEl.createSpan().replaceWith(source.slice(textFrom, textTo));
    const mathEl = (0, import_obsidian3.renderMath)(mathString, false);
    mathLinkEl.createSpan({ cls: ["math", "math-inline", "is-loaded"] }).replaceWith(mathEl);
    (0, import_obsidian3.finishRenderMath)();
    textFrom = mathPattern.lastIndex;
  }
  if (textFrom < source.length)
    mathLinkEl.createSpan().replaceWith(source.slice(textFrom));
}
function getMathLink(plugin, targetLink, sourcePath) {
  var _a;
  let { path, subpath } = (0, import_obsidian3.parseLinktext)(targetLink);
  let file = plugin.app.metadataCache.getFirstLinkpathDest(path, sourcePath);
  if (!file)
    return "";
  let cache = plugin.app.metadataCache.getFileCache(file);
  if (!cache)
    return "";
  let subpathResult = (0, import_obsidian3.resolveSubpath)(cache, subpath);
  let mathLink = "";
  if (cache.frontmatter) {
    if (subpathResult) {
      mathLink = getMathLinkFromSubpath(plugin, path, subpathResult, cache.frontmatter, plugin.settings.blockPrefix, plugin.settings.enableFileNameBlockLinks);
    } else if (path) {
      mathLink = cache.frontmatter.mathLink;
      if (mathLink == "auto") {
        mathLink = getMathLinkFromTemplates(plugin, file);
      }
    }
  }
  if (!mathLink && plugin.settings.enableAPI) {
    for (let account of plugin.apiAccounts) {
      if (account.metadataSet[file.path]) {
        let metadata = account.metadataSet[file.path];
        if (subpathResult) {
          mathLink = getMathLinkFromSubpath(plugin, path, subpathResult, metadata, account.blockPrefix, account.enableFileNameBlockLinks);
        } else {
          mathLink = (_a = metadata["mathLink"]) != null ? _a : "";
        }
      }
      if (mathLink) {
        break;
      }
    }
  }
  return mathLink;
}
function getMathLinkFromSubpath(plugin, linkpath, subpathResult, metadata, blockPrefix, enableFileNameBlockLinks) {
  var _a;
  let subMathLink = "";
  if (subpathResult.type == "heading") {
    subMathLink = subpathResult.current.heading;
  } else if (subpathResult.type == "block" && metadata["mathLink-blocks"] && metadata["mathLink-blocks"][subpathResult.block.id]) {
    subMathLink = blockPrefix + metadata["mathLink-blocks"][subpathResult.block.id];
  }
  if (subMathLink) {
    if (linkpath && enableFileNameBlockLinks) {
      return ((_a = metadata["mathLink"]) != null ? _a : linkpath) + " > " + subMathLink;
    } else {
      return subMathLink;
    }
  } else {
    return "";
  }
}
function getMathLinkFromTemplates(plugin, file) {
  let templates = plugin.settings.templates;
  let mathLink = file.name.replace(/\.md$/, "");
  for (let i = 0; i < templates.length; i++) {
    let replaced = new RegExp(templates[i].replaced);
    let replacement = templates[i].replacement;
    let flags = "";
    if (templates[i].globalMatch)
      flags += "g";
    if (!templates[i].sensitive)
      flags += "i";
    if (templates[i].word)
      replaced = RegExp(replaced.source.replace(/^/, "\\b").replace(/$/, "\\b"), flags);
    else
      replaced = RegExp(replaced.source, flags);
    mathLink = mathLink.replace(replaced, replacement);
  }
  return mathLink;
}

// src/preview.ts
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var import_obsidian4 = require("obsidian");

// src/supercharged.ts
function addSuperCharged(plugin, span, outLinkFile) {
  if (outLinkFile && plugin.app.plugins.enabledPlugins.has("supercharged-links-obsidian")) {
    let superCharged = getSuperCharged(plugin, outLinkFile);
    span.classList.add("data-link-icon");
    span.classList.add("data-link-icon-after");
    span.classList.add("data-link-text");
    span.setAttribute("data-link-path", outLinkFile.path);
    span.setAttribute("data-link-tags", superCharged[0]);
    for (let i = 0; i < superCharged[1].length; i++)
      span.setAttribute("data-link-" + superCharged[1][i][0], superCharged[1][i][1]);
  }
}
function getSuperCharged(plugin, file) {
  var _a, _b, _c;
  const data = (_a = plugin.app.plugins.plugins["supercharged-links-obsidian"]) == null ? void 0 : _a.settings;
  let tagArr = (_b = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _b.tags;
  let tags = "";
  if (tagArr) {
    for (let i = 0; i < tagArr.length; i++)
      tags += tagArr[i].tag.replace(/#/, "") + " ";
    tags = tags.trimEnd();
  }
  let attributes = [];
  let frontmatter = (_c = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _c.frontmatter;
  if (data) {
    for (let attr in frontmatter) {
      if (attr != "mathLink" && attr != "position") {
        let selectors = data.selectors;
        for (let i = 0; i < selectors.length; i++) {
          if (selectors[i].name == attr && selectors[i].value == frontmatter[attr]) {
            attributes.push([attr, frontmatter[attr]]);
          } else if (selectors[i].type == "tag" && selectors[i].value == frontmatter[attr] && data.targetTags) {
            attributes.push([attr, frontmatter[attr]]);
          }
        }
      }
    }
  }
  return [tags, attributes];
}

// src/preview.ts
function buildLivePreview(plugin, leaf) {
  let leafView = leaf.view;
  class MathWidget extends import_view.WidgetType {
    constructor(outLinkText, outLinkMathLink) {
      super();
      this.outLinkText = outLinkText;
      this.outLinkMathLink = outLinkMathLink;
    }
    toDOM() {
      let mathLink = document.createElement("span");
      setMathLink(this.outLinkMathLink, mathLink);
      mathLink.classList.add("cm-underline");
      mathLink.setAttribute("draggable", "true");
      let outLinkFile = plugin.app.metadataCache.getFirstLinkpathDest(this.outLinkText.replace(/#.*$/, ""), "");
      if (outLinkFile)
        addSuperCharged(plugin, mathLink, outLinkFile);
      let mathLinkWrapper = document.createElement("span");
      mathLinkWrapper.classList.add("cm-hmd-internal-link");
      mathLinkWrapper.appendChild(mathLink);
      let outLinkFileName = this.outLinkText.replace(/#.*$/, "");
      if (!outLinkFileName) {
        if (leafView.file) {
          outLinkFileName = leafView.file.path;
          if (outLinkFileName.endsWith(".canvas")) {
            for (let node of leafView.canvas.selection.values()) {
              outLinkFileName = node.filePath;
              break;
            }
          }
        }
      }
      mathLinkWrapper.onclick = (evt) => {
        evt.preventDefault();
        plugin.app.workspace.openLinkText(this.outLinkText, outLinkFileName, evt.ctrlKey || evt.metaKey);
      };
      mathLinkWrapper.onmousedown = (evt) => {
        if (evt.button == 1) {
          evt.preventDefault();
        }
      };
      mathLinkWrapper.onauxclick = (evt) => {
        if (evt.button == 1) {
          plugin.app.workspace.openLinkText(this.outLinkText, outLinkFileName, true);
        }
      };
      return mathLinkWrapper;
    }
  }
  let viewPlugin = import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.tryBuildingDecorations(view);
    }
    update(update) {
      this.tryBuildingDecorations(update.view);
    }
    tryBuildingDecorations(view) {
      this.decorations = this.destroyDecorations(view);
      let editorView = leaf.getViewState();
      if (leaf.view instanceof import_obsidian4.MarkdownView && leaf.view.file instanceof import_obsidian4.TFile && isValid(plugin, leaf.view.file.name)) {
        let curView = leaf.view.editor.cm;
        if (curView == view && editorView.state.mode == "source" && !editorView.state.source) {
          this.decorations = this.buildDecorations(view);
        } else {
          this.decorations = this.destroyDecorations(view);
        }
      } else if (leafView.canvas) {
        for (let node of leafView.canvas.selection.values()) {
          if (isValid(plugin, node.filePath)) {
            this.decorations = this.buildDecorations(view);
          }
        }
        plugin.app.workspace.iterateRootLeaves((otherLeaf) => {
          if (otherLeaf.view instanceof import_obsidian4.MarkdownView) {
            let otherView = otherLeaf.view.editor.cm;
            if (otherView == view) {
              this.decorations = this.destroyDecorations(view);
            }
          }
        });
      }
    }
    buildDecorations(view) {
      let builder = new import_state.RangeSetBuilder();
      for (let { from, to } of view.visibleRanges) {
        let start = -1, end = -1, outLinkText = "", outLinkMathLink = "";
        (0, import_language.syntaxTree)(view.state).iterate({
          from,
          to,
          enter(node) {
            let name = node.type.name;
            if (name.contains("formatting-link_formatting-link-start")) {
              start = node.from;
            } else if (name.contains("formatting_formatting-link_link")) {
              if (start == -1)
                start = node.from;
            } else if (name.contains("has-alias")) {
              outLinkText += view.state.doc.sliceString(node.from, node.to);
              if (leafView.file && outLinkMathLink == outLinkText.replace(/\.md/, "")) {
                outLinkMathLink = getMathLink(plugin, outLinkText, leafView.file.path);
              }
            } else if (/string_url$/.test(name) && !name.contains("format")) {
              outLinkText += decodeURI(view.state.doc.sliceString(node.from, node.to));
              if (leafView.file && outLinkMathLink == outLinkText.replace(/\.md/, "")) {
                outLinkMathLink = getMathLink(plugin, outLinkText, leafView.file.path);
              }
            } else if (leafView.file && name.contains("hmd-internal-link") && !name.contains("alias")) {
              outLinkText += view.state.doc.sliceString(node.from, node.to);
              outLinkMathLink = getMathLink(plugin, outLinkText, leafView.file.path);
            } else if (name.contains("formatting-link-end") || name.contains("formatting-link-string")) {
              if (!name.contains("end") && end == -1) {
                end = -2;
              } else {
                end = node.to;
                let cursorRange = view.state.selection.ranges[0];
                if (start > cursorRange.to || end < cursorRange.from) {
                  if (outLinkText && outLinkMathLink) {
                    builder.add(start, end, import_view.Decoration.widget({
                      widget: new MathWidget(outLinkText, outLinkMathLink.replace(/\\\$/, "$"))
                    }));
                  }
                }
                start = -1;
                end = -1;
                outLinkText = "";
                outLinkMathLink = "";
              }
            } else if (!name.contains("pipe") && (name.contains("hmd-internal-link") && name.contains("alias") || name.contains("hmd-escape") || /^link/.test(name))) {
              outLinkMathLink += view.state.doc.sliceString(node.from, node.to);
              if (leafView.file && outLinkMathLink == outLinkText.replace(/\.md/, "")) {
                outLinkMathLink = getMathLink(plugin, outLinkText, leafView.file.path);
              }
            }
          }
        });
      }
      return builder.finish();
    }
    destroyDecorations(view) {
      let builder = new import_state.RangeSetBuilder();
      for (let { from, to } of view.visibleRanges) {
        (0, import_language.syntaxTree)(view.state).iterate({ from, to, enter(node) {
        } });
      }
      return builder.finish();
    }
  }, { decorations: (v) => v.decorations });
  return new Promise((resolve) => {
    resolve(viewPlugin);
  });
}

// src/main.ts
var MathLinks = class extends import_obsidian5.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      yield (0, import_obsidian5.loadMathJax)();
      this.registerMarkdownPostProcessor((element, context) => {
        if (isValid(this, context.sourcePath)) {
          generateMathLinks(this, element, context);
        }
      });
      this.app.workspace.onLayoutReady(() => {
        this.app.workspace.iterateRootLeaves((leaf) => {
          if (leaf.view instanceof import_obsidian5.FileView && leaf.view.file && isValid(this, leaf.view.file.path)) {
            buildLivePreview(this, leaf).then((livePreview) => {
              this.registerEditorExtension(livePreview);
            });
          }
        });
      });
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if (leaf.view instanceof import_obsidian5.FileView && leaf.view.file && isValid(this, leaf.view.file.path)) {
          buildLivePreview(this, leaf).then((livePreview) => {
            this.registerEditorExtension(livePreview);
          });
        }
      });
      this.apiAccounts = [];
    });
  }
  getAPIAccount(userPlugin) {
    let account = this.apiAccounts.find((account2) => account2.manifest.id == userPlugin.manifest.id);
    if (account)
      return account;
    account = new MathLinksAPIAccount(this, userPlugin.manifest, DEFAULT_SETTINGS.blockPrefix, DEFAULT_SETTINGS.enableFileNameBlockLinks);
    this.apiAccounts.push(account);
    return account;
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      this.addSettingTab(new MathLinksSettingTab(this.app, this));
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
