/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin:
https://github.com/zhaoshenzhai/obsidian-mathlinks
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  templates: [],
  excludedFilePaths: [],
  blockPrefix: "^",
  enableFileNameBlockLinks: true,
  enableAPI: true
};
var MathLinksSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    return __async(this, null, function* () {
      const { containerEl } = this;
      containerEl.empty();
      containerEl.createEl("h2", { text: "MathLinks Settings" });
      new import_obsidian.Setting(containerEl).setName("Add a new template").setDesc(createFragment((e) => {
        e.createSpan({ text: "Generate mathLinks with a new template. Use " });
        e.createEl("code", { text: "mathLink: auto" });
        e.createSpan({ text: " to use templates in a file." });
      })).addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddTemplatesModal(this.app, this.plugin.settings.templates);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const template = {
                title: modal.title,
                replaced: modal.replaced,
                replacement: modal.replacement,
                globalMatch: modal.globalMatch,
                sensitive: modal.sensitive,
                word: modal.word
              };
              this.plugin.settings.templates.push(template);
              yield this.plugin.saveSettings();
              new import_obsidian.Notice("MathLinks: Template added");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let templateTitle;
      new import_obsidian.Setting(containerEl).setName("Edit/delete template").setDesc("Select a template to edit/delete it.").addDropdown((dropdown) => {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.templates.forEach((template) => {
          dropdown.addOption(template.title, template.title);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            templateTitle = current;
          else
            templateTitle = null;
        }));
      }).addExtraButton((button) => {
        let b = button.setTooltip("Edit").setIcon("edit").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let originalTemplates = JSON.parse(JSON.stringify(this.plugin.settings.templates));
            let modal = new EditTemplatesModal(this.app, templateTitle, this.plugin.settings.templates);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                yield this.plugin.saveSettings();
                new import_obsidian.Notice("MathLinks: Template saved");
              } else {
                this.plugin.settings.templates = originalTemplates;
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template");
          }
        }));
        return b;
      }).addExtraButton((button) => {
        let b = button.setTooltip("Delete").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let modal = new ConfirmModal(this.app, `Are you sure you want to delete "${templateTitle}"?`, "Yes", "No");
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.templates.length; i++) {
                  if (this.plugin.settings.templates[i].title == templateTitle) {
                    this.plugin.settings.templates.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: Template "${templateTitle}" deleted`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template");
          }
        }));
        return b;
      });
      new import_obsidian.Setting(containerEl).setName("Add an excluded file").setDesc("MathLinks will ignore those files.").addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddExcludedModal(this.app, this.plugin.settings.excludedFilePaths);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const excludedFilePath2 = {
                path: modal.excludedFilePath,
                isFile: modal.isFile
              };
              this.plugin.settings.excludedFilePaths.push(excludedFilePath2);
              yield this.plugin.saveSettings();
              if (modal.isFile)
                new import_obsidian.Notice("MathLinks: File excluded");
              else
                new import_obsidian.Notice("MathLinks: Path exclcuded");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let excludedFilePath;
      new import_obsidian.Setting(containerEl).setName("Remove from excluded files").setDesc("Remove a file from the list of excluded files.").addDropdown((dropdown) => __async(this, null, function* () {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.excludedFilePaths.forEach((excludedFilePath2) => {
          dropdown.addOption(excludedFilePath2.path, excludedFilePath2.path);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            excludedFilePath = current;
          else
            excludedFilePath = null;
        }));
      })).addExtraButton((button) => {
        let b = button.setTooltip("Remove").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (excludedFilePath) {
            let modal = new ConfirmModal(this.app, `Are you sure you want to remove "${excludedFilePath}" from the list of excluded files/paths?`, "Yes", "No");
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.excludedFilePaths.length; i++) {
                  if (this.plugin.settings.excludedFilePaths[i].path == excludedFilePath) {
                    this.plugin.settings.excludedFilePaths.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: "${excludedFilePath}" removed from excluded files`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a file");
          }
        }));
        return b;
      });
      let prefix;
      new import_obsidian.Setting(containerEl).setName("Edit prefix for block links").setDesc(createFragment((e) => {
        e.createSpan({ text: "Links like " });
        e.createEl("code", { text: "note#^block-id" });
        e.createSpan({ text: " will be rendered as" });
        if (this.plugin.settings.enableFileNameBlockLinks) {
          e.createEl("code", { text: "note > " + this.plugin.settings.blockPrefix + "block-id" });
        } else {
          e.createEl("code", { text: this.plugin.settings.blockPrefix + "block-id" });
        }
        e.createSpan({ text: "." });
      })).addText((text) => {
        prefix = text;
        prefix.setValue(this.plugin.settings.blockPrefix).onChange((current) => __async(this, null, function* () {
          this.plugin.settings.blockPrefix = current;
          yield this.plugin.saveSettings();
        }));
        prefix.setPlaceholder("No prefix");
      }).addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.enableFileNameBlockLinks).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.enableFileNameBlockLinks = value;
          yield this.plugin.saveSettings();
        }));
        toggle.setTooltip("Disable to ignore note name.");
      });
      new import_obsidian.Setting(containerEl).setName("Enable MathLinks API").setDesc(createFragment((e) => {
        let accounts = this.plugin.apiAccounts;
        e.createSpan({ text: "Allow other community plugins to use MathLinks." });
        if (accounts.length) {
          let list = e.createEl("ul");
          for (let account of accounts) {
            list.createEl("li", { text: account.manifest.name });
          }
        }
      })).addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.enableAPI).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.enableAPI = value;
          yield this.plugin.saveSettings();
        }));
      });
    });
  }
};
var AddTemplatesModal = class extends import_obsidian.Modal {
  constructor(app2, templates) {
    super(app2);
    this.saved = false;
    this.error = ["MathLinks: Please enter a title", "MathLinks: Please enter a non-empty string to be replaced"];
    this.title = "";
    this.replaced = "";
    this.replacement = "";
    this.globalMatch = true;
    this.sensitive = true;
    this.word = true;
    this.templates = [];
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    loadTemplateSettings(contentEl, this, this, "add");
    loadButtonsToClose(this, this.contentEl.createDiv(), "Add", "Cancel");
  }
};
var EditTemplatesModal = class extends import_obsidian.Modal {
  constructor(app2, templateTitle, templates) {
    super(app2);
    this.saved = false;
    this.error = ["", ""];
    this.templateTitle = templateTitle;
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.templates.every((template) => {
      if (this.templateTitle != void 0 && template.title == this.templateTitle) {
        loadTemplateSettings(contentEl, template, this, "edit");
        return false;
      }
      return true;
    });
    loadButtonsToClose(this, this.contentEl.createDiv(), "Save", "Cancel");
  }
};
var AddExcludedModal = class extends import_obsidian.Modal {
  constructor(app2, excludedFilePaths) {
    super(app2);
    this.saved = false;
    this.error = ["MathLinks: Please enter a valid file/path", ""];
    this.excludedFilePaths = excludedFilePaths;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    let excludedFilePathText;
    new import_obsidian.Setting(contentEl).setName("File name/path of folder").setDesc(createFragment((e) => {
      e.createSpan({ text: "Enter a file as" });
      e.createEl("code", { text: "path/name.md" });
      e.createSpan({ text: " and a folder as " });
      e.createEl("code", { text: "path" });
      e.createSpan({ text: "." });
    })).addText((text) => {
      excludedFilePathText = text;
      let footerEl = this.contentEl.createDiv();
      loadButtonsToClose(this, footerEl, "Add", "Cancel");
      excludedFilePathText.onChange((current) => {
        let file = app.vault.getAbstractFileByPath(current);
        if (file != null) {
          this.excludedFilePath = file.path;
          this.isFile = file instanceof import_obsidian.TFile;
          this.error[0] = "";
        } else {
          this.error[0] = "MathLinks: Please enter a valid file/path";
        }
        this.error[1] = "";
        this.excludedFilePaths.every((path) => {
          if (path.path == current) {
            this.error[1] = "MathLinks: Duplicate file/path";
            return false;
          }
          return true;
        });
        footerEl.empty();
        loadButtonsToClose(this, footerEl, "Add", "Cancel");
      });
    });
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app2, areYouSure, proceed, noProceed) {
    super(app2);
    this.saved = false;
    this.error = [];
    this.areYouSure = areYouSure;
    this.proceed = proceed;
    this.noProceed = noProceed;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", { text: this.areYouSure });
    loadButtonsToClose(this, this.contentEl.createDiv(), this.proceed, this.noProceed);
  }
};
function loadTemplateSettings(contentEl, template, modal, modalType) {
  let titleText;
  new import_obsidian.Setting(contentEl).setName("Title").setDesc("Name of the template.").addText((text) => {
    titleText = text;
    titleText.setValue(template.title).onChange((current) => {
      template.title = current;
      modal.error[0] = "";
      if (modalType == "add") {
        template.templates.every((t) => {
          if (template.title != "" && template.title == t.title) {
            modal.error[0] = "MathLinks: Duplicate title";
            return false;
          }
          return true;
        });
      }
      if (template.title == "") {
        modal.error[0] = "MathLinks: Please enter a title";
      }
    });
  });
  let replacedText;
  new import_obsidian.Setting(contentEl).setName("Match for...").setDesc("String to be matched and replaced. Do not include regex.").addText((text) => {
    replacedText = text;
    replacedText.setValue(template.replaced).onChange((current) => {
      template.replaced = current;
      modal.error[1] = "";
      if (template.replaced == "") {
        modal.error[1] = "MathLinks: Please enter a non-empty string to be replaced";
      }
    });
  });
  let replacementText;
  new import_obsidian.Setting(contentEl).setName("Replace with...").setDesc("String to replace matches. Do not escape backslashes.").addText((text) => {
    replacementText = text;
    replacementText.setValue(template.replacement).onChange((current) => {
      template.replacement = current;
    });
  });
  new import_obsidian.Setting(contentEl).setName("Global match").setDesc("Match all instances (instead of just the first).").addToggle((toggle) => {
    toggle.setValue(template.globalMatch).onChange((current) => template.globalMatch = current);
  });
  new import_obsidian.Setting(contentEl).setName("Case sensitive").setDesc("Matches will be case sensitive.").addToggle((toggle) => {
    toggle.setValue(template.sensitive).onChange((current) => template.sensitive = current);
  });
  new import_obsidian.Setting(contentEl).setName("Match whole words").setDesc("Only match whole words.").addToggle((toggle) => {
    toggle.setValue(template.word).onChange((current) => template.word = current);
  });
}
function loadButtonsToClose(modal, element, trueToolTip, falseToolTip) {
  let footerButtons = new import_obsidian.Setting(element);
  footerButtons.addButton((b) => {
    b.setTooltip(trueToolTip).setIcon("checkmark").onClick(() => __async(this, null, function* () {
      let proceed = modal.error.every((error) => {
        if (error != "") {
          return false;
        }
        return true;
      });
      if (!proceed) {
        modal.error.forEach((error) => {
          if (error != "") {
            new import_obsidian.Notice(error);
          }
        });
      } else {
        modal.saved = true;
        modal.close();
      }
    }));
  });
  footerButtons.addExtraButton((b) => {
    b.setTooltip(falseToolTip).setIcon("cross").onClick(() => __async(this, null, function* () {
      modal.saved = false;
      modal.close();
    }));
  });
}

// src/api.ts
var import_obsidian2 = require("obsidian");
var MathLinksAPIAccount = class {
  constructor(plugin, manifest, blockPrefix) {
    this.plugin = plugin;
    this.manifest = manifest;
    this.blockPrefix = blockPrefix;
    this.metadataSet = {};
  }
  update(path, newMetadata) {
    let file = this.plugin.app.vault.getAbstractFileByPath(path);
    if (file instanceof import_obsidian2.TFile && file.extension == "md") {
      this.metadataSet[path] = Object.assign({}, this.metadataSet[path], newMetadata);
    } else {
      throw Error(`MathLinks API: Invalid path: ${path}`);
    }
  }
  get(path, blockID) {
    let metadata = this.metadataSet[path];
    if (metadata) {
      if (blockID === void 0) {
        return metadata["mathLink"];
      }
      let blocks = metadata["mathLink-blocks"];
      if (blocks) {
        return blocks[blockID];
      }
    }
  }
  delete(path, which) {
    let metadata = this.metadataSet[path];
    if (metadata) {
      if (which === void 0) {
        delete this.metadataSet[path];
      } else if (which == "mathLink" || which == "mathLink-blocks") {
        if (metadata[which] !== void 0) {
          delete metadata[which];
        } else {
          throw Error(`MathLinks API: Key "${which}" does not exist in MathLinks.externalMathLinks[${path}]`);
        }
      } else {
        let blocks = metadata["mathLink-blocks"];
        if (blocks && blocks[which] !== void 0) {
          delete blocks[which];
        } else {
          throw Error(`MathLinks API: Block ID "${which}" does not exist in MathLinks.externalMathLinks[${path}]["mathLink-blocks"]`);
        }
      }
    } else {
      throw Error(`MathLinks API: Path ${path} does not exist in MathLinks.externalMathLinks`);
    }
  }
  deleteAccount() {
    let index = this.plugin.apiAccounts.findIndex((account) => account.manifest.id == this.manifest.id);
    this.plugin.apiAccounts.splice(index, 1);
  }
};

// src/links.ts
var import_obsidian3 = require("obsidian");

// src/utils.ts
function isValid(plugin, element, fileName) {
  while (element.parentNode && element.parentNode.nodeName.toLowerCase() != "body") {
    element = element.parentNode;
    if (element.className.toLowerCase().includes("canvas")) {
      return true;
    }
  }
  for (let i = 0; i < plugin.settings.excludedFilePaths.length; i++) {
    let path = plugin.settings.excludedFilePaths[i];
    if (path.isFile && fileName == path.path) {
      return false;
    } else if (!path.isFile) {
      let pathRegex = new RegExp(`\\b${path.path}/`);
      if (pathRegex.test(fileName))
        return false;
    }
  }
  return true;
}
function translateLink(targetLink) {
  var _a;
  function translateLinkImpl(targetLink2, pattern) {
    let result = pattern.exec(targetLink2);
    if (result)
      return (result[1] ? `${result[1]} > ` : "") + `${result[2]}`;
  }
  let headingPattern = /(^.*)#([^\^].*)/;
  let blockPattern = /(^.*)#(\^[a-zA-Z0-9\-]+)/;
  let translatedAsHeading = translateLinkImpl(targetLink, headingPattern);
  let translatedAsBlock = translateLinkImpl(targetLink, blockPattern);
  return (_a = translatedAsHeading != null ? translatedAsHeading : translatedAsBlock) != null ? _a : "";
}

// src/links.ts
function generateMathLinks(plugin, element, sourcePath) {
  for (let targetEl of element.querySelectorAll(".internal-link")) {
    if (targetEl.classList.contains("mathLink-internal-link")) {
      targetEl.remove();
      targetEl = element.querySelector(".original-internal-link");
      targetEl.classList.remove("original-internal-link");
      targetEl.style.display = "";
    }
    let targetDisplay = targetEl.textContent.trim();
    if (targetDisplay != "" && !/math-inline is-loaded/.test(targetEl.innerHTML)) {
      let targetLink = targetEl.getAttribute("data-href").replace(/\.md/, "");
      if (targetDisplay != targetLink && targetDisplay != translateLink(targetLink)) {
        addMathLink(targetEl, targetDisplay, true);
      } else {
        let targetMathLink = getMathLink(plugin, targetLink, sourcePath);
        if (targetMathLink) {
          let targetName = plugin.app.metadataCache.getFirstLinkpathDest((0, import_obsidian3.getLinkpath)(targetLink), sourcePath).basename;
          if (targetEl.innerText == targetName || targetEl.innerText == translateLink(targetLink)) {
            addMathLink(targetEl, targetMathLink, true);
          }
        }
      }
    }
  }
}
function addMathLink(targetEl, mathLink2, newElement) {
  let splits = [];
  let split = "";
  let isMath = false;
  for (let i = 0; i < mathLink2.length; i++) {
    let character = mathLink2[i];
    if (character == "$") {
      if (split != "") {
        splits.push([split, isMath]);
        split = "";
      }
      isMath = !isMath;
    } else {
      split += character;
    }
    if (i == mathLink2.length - 1 && split != "") {
      splits.push([split, isMath]);
    }
  }
  let mathLinkEl = targetEl.cloneNode(newElement);
  mathLinkEl.innerText = "";
  for (let i = 0; i < splits.length; i++) {
    let word = splits[i][0];
    if (splits[i][1]) {
      let wordMath = (0, import_obsidian3.renderMath)(word, false);
      let mathEl = mathLinkEl.createSpan();
      mathEl.replaceWith(wordMath);
    } else {
      let wordEl = mathLinkEl.createSpan();
      wordEl.innerText += word;
    }
  }
  (0, import_obsidian3.finishRenderMath)();
  if (newElement) {
    targetEl.parentNode.insertBefore(mathLinkEl, targetEl.nextSibling);
    mathLinkEl.classList.add("mathLink-internal-link");
    targetEl.classList.add("original-internal-link");
    targetEl.style.display = "none";
  }
  return mathLinkEl;
}
function getMathLink(plugin, targetLink, sourcePath) {
  var _a;
  let { path, subpath } = (0, import_obsidian3.parseLinktext)(targetLink);
  let file = plugin.app.metadataCache.getFirstLinkpathDest(path, sourcePath);
  if (!file)
    return "";
  let cache = plugin.app.metadataCache.getFileCache(file);
  if (!cache)
    return "";
  let subpathResult = (0, import_obsidian3.resolveSubpath)(cache, subpath);
  let mathLink2 = "";
  if (cache.frontmatter) {
    if (subpathResult) {
      mathLink2 = getMathLinkFromSubpath(plugin, path, subpathResult, cache.frontmatter, plugin.settings.blockPrefix);
    } else if (path) {
      mathLink2 = cache.frontmatter.mathLink;
      if (mathLink2 == "auto") {
        mathLink2 = getMathLinkFromTemplates(plugin, file);
      }
    }
  }
  if (!mathLink2 && plugin.settings.enableAPI) {
    for (let account of plugin.apiAccounts) {
      if (account.metadataSet[file.path]) {
        let metadata = account.metadataSet[file.path];
        if (subpathResult) {
          mathLink2 = getMathLinkFromSubpath(path, subpathResult, metadata, account.blockPrefix);
        } else {
          mathLink2 = (_a = metadata["mathLink"]) != null ? _a : "";
        }
      }
      if (mathLink2) {
        break;
      }
    }
  }
  return mathLink2;
}
function getMathLinkFromSubpath(plugin, linkpath, subpathResult, metadata, blockPrefix) {
  var _a;
  let subMathLink = "";
  if (subpathResult.type == "heading") {
    subMathLink = subpathResult.current.heading;
  } else if (subpathResult.type == "block" && metadata["mathLink-blocks"] && metadata["mathLink-blocks"][subpathResult.block.id]) {
    subMathLink = blockPrefix + metadata["mathLink-blocks"][subpathResult.block.id];
  }
  if (subMathLink) {
    if (linkpath && plugin.settings.enableFileNameBlockLinks) {
      return ((_a = metadata["mathLink"]) != null ? _a : linkpath) + " > " + subMathLink;
    } else {
      return subMathLink;
    }
  } else {
    return "";
  }
}
function getMathLinkFromTemplates(plugin, file) {
  let templates = plugin.settings.templates;
  mathLink = file.name.replace(/\.md$/, "");
  for (let i = 0; i < templates.length; i++) {
    let replaced = new RegExp(templates[i].replaced);
    let replacement = templates[i].replacement;
    let flags = "";
    if (templates[i].globalMatch)
      flags += "g";
    if (!templates[i].sensitive)
      flags += "i";
    if (templates[i].word)
      replaced = RegExp(replaced.source.replace(/^/, "\\b").replace(/$/, "\\b"), flags);
    else
      replaced = RegExp(replaced.source, flags);
    mathLink = mathLink.replace(replaced, replacement);
  }
  return mathLink;
}

// src/preview.ts
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");

// src/supercharged.ts
function addSuperCharged(plugin, span, outLinkFile) {
  if (outLinkFile && plugin.app.plugins.enabledPlugins.has("supercharged-links-obsidian")) {
    let superCharged = getSuperCharged(plugin, outLinkFile);
    span.classList.add("data-link-icon");
    span.classList.add("data-link-icon-after");
    span.classList.add("data-link-text");
    span.setAttribute("data-link-path", outLinkFile.path);
    span.setAttribute("data-link-tags", superCharged[0]);
    for (let i = 0; i < superCharged[1].length; i++)
      span.setAttribute("data-link-" + superCharged[1][i][0], superCharged[1][i][1]);
  }
}
function getSuperCharged(plugin, file) {
  const data = app.plugins.getPlugin("supercharged-links-obsidian").settings;
  let tagArr = plugin.app.metadataCache.getFileCache(file).tags;
  let tags = "";
  if (tagArr) {
    for (let i = 0; i < tagArr.length; i++)
      tags += tagArr[i].tag.replace(/#/, "") + " ";
    tags = tags.trimEnd();
  }
  let attributes = [];
  let frontmatter = plugin.app.metadataCache.getFileCache(file).frontmatter;
  for (let attr in frontmatter) {
    if (attr != "mathLink" && attr != "position") {
      let selectors = data.selectors;
      for (let i = 0; i < selectors.length; i++) {
        if (selectors[i].name == attr && selectors[i].value == frontmatter[attr]) {
          attributes.push([attr, frontmatter[attr]]);
        } else if (selectors[i].type == "tag" && selectors[i].value == frontmatter[attr] && data.targetTags) {
          attributes.push([attr, frontmatter[attr]]);
        }
      }
    }
  }
  return [tags, attributes];
}

// src/preview.ts
function buildLivePreview(plugin, leaf) {
  class MathWidget extends import_view.WidgetType {
    constructor(outLinkText, outLinkMathLink) {
      super();
      this.outLinkText = outLinkText;
      this.outLinkMathLink = outLinkMathLink;
    }
    toDOM() {
      let mathLink2 = addMathLink(document.createElement("span"), this.outLinkMathLink, false);
      mathLink2.classList.add("cm-underline");
      mathLink2.setAttribute("draggable", true);
      let spanInner = document.createElement("span");
      spanInner.appendChild(mathLink2);
      addSuperCharged(plugin, spanInner, plugin.app.metadataCache.getFirstLinkpathDest(this.outLinkText.replace(/#.*$/, ""), ""));
      let spanOuter = document.createElement("span");
      spanOuter.classList.add("cm-hmd-internal-link");
      spanOuter.appendChild(spanInner);
      let outLinkFileName = this.outLinkText.replace(/#.*$/, "");
      if (!outLinkFileName) {
        outLinkFileName = leaf.view.file.path;
        if (outLinkFileName == "Canvas.canvas") {
          for (let node of leaf.view.canvas.selection.values()) {
            outLinkFileName = node.filePath;
            break;
          }
        }
      }
      spanOuter.onclick = (evt) => {
        evt.preventDefault();
        plugin.app.workspace.openLinkText(this.outLinkText, outLinkFileName, evt.ctrlKey || evt.metaKey);
      };
      spanOuter.onmousedown = (evt) => {
        if (evt.button == 1) {
          evt.preventDefault();
        }
      };
      spanOuter.onauxclick = (evt) => {
        if (evt.button == 1) {
          plugin.app.workspace.openLinkText(this.outLinkText, outLinkFileName, true);
        }
      };
      return spanOuter;
    }
  }
  let viewPlugin = import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.tryBuildingDecorations(view);
    }
    update(update) {
      this.tryBuildingDecorations(update.view);
    }
    tryBuildingDecorations(view) {
      this.decorations = this.destroyDecorations(view);
      let editorView = leaf.getViewState();
      if (leaf.view.editor) {
        let curView = leaf.view.editor.cm;
        if (curView == view && editorView.state.mode == "source" && !editorView.state.source) {
          this.decorations = this.buildDecorations(view);
        } else {
          this.decorations = this.destroyDecorations(view);
        }
      } else if (leaf.view.canvas) {
        this.decorations = this.buildDecorations(view);
        plugin.app.workspace.iterateRootLeaves((otherLeaf) => {
          if (otherLeaf.view.editor) {
            let otherView = otherLeaf.view.editor.cm;
            if (otherView == view) {
              this.decorations = this.destroyDecorations(view);
            }
          }
        });
      }
    }
    buildDecorations(view) {
      let builder = new import_state.RangeSetBuilder();
      for (let { from, to } of view.visibleRanges) {
        let start = -1, end = -1, outLinkText = "", outLinkMathLink = "";
        (0, import_language.syntaxTree)(view.state).iterate({
          from,
          to,
          enter(node) {
            let name = node.type.name;
            if (name.contains("formatting-link_formatting-link-start")) {
              start = node.from;
            } else if (name.contains("formatting_formatting-link_link")) {
              if (start == -1)
                start = node.from;
            } else if (name.contains("has-alias")) {
              outLinkText += view.state.doc.sliceString(node.from, node.to);
              if (outLinkMathLink == outLinkText.replace(/\.md/, "")) {
                outLinkMathLink = getMathLink(plugin, outLinkText, leaf.view.file.path);
              }
            } else if (/string_url$/.test(name) && !name.contains("format")) {
              outLinkText += decodeURI(view.state.doc.sliceString(node.from, node.to));
              if (outLinkMathLink == outLinkText.replace(/\.md/, "")) {
                outLinkMathLink = getMathLink(plugin, outLinkText, leaf.view.file.path);
              }
            } else if (name.contains("hmd-internal-link") && !name.contains("alias")) {
              outLinkText += view.state.doc.sliceString(node.from, node.to);
              outLinkMathLink = getMathLink(plugin, outLinkText, leaf.view.file.path);
            } else if (name.contains("formatting-link-end") || name.contains("formatting-link-string")) {
              if (!name.contains("end") && end == -1) {
                end = -2;
              } else {
                end = node.to;
                let cursorRange = view.state.selection.ranges[0];
                if (start > cursorRange.to || end < cursorRange.from) {
                  if (outLinkText && outLinkMathLink) {
                    builder.add(start, end, import_view.Decoration.widget({
                      widget: new MathWidget(outLinkText, outLinkMathLink.replace(/\\\$/, "$"))
                    }));
                  }
                }
                start = -1;
                end = -1;
                outLinkText = "";
                outLinkMathLink = "";
              }
            } else if (!name.contains("pipe") && (name.contains("hmd-internal-link") && name.contains("alias") || name.contains("hmd-escape") || /^link/.test(name))) {
              outLinkMathLink += view.state.doc.sliceString(node.from, node.to);
              if (outLinkMathLink == outLinkText.replace(/\.md/, "")) {
                outLinkMathLink = getMathLink(plugin, outLinkText, leaf.view.file.path);
              }
            }
          }
        });
      }
      return builder.finish();
    }
    destroyDecorations(view) {
      let builder = new import_state.RangeSetBuilder();
      for (let { from, to } of view.visibleRanges) {
        (0, import_language.syntaxTree)(view.state).iterate({ from, to, enter(node) {
        } });
      }
      return builder.finish();
    }
  }, { decorations: (v) => v.decorations });
  return new Promise((resolve) => {
    resolve(viewPlugin);
  });
}

// src/main.ts
var MathLinks = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      yield (0, import_obsidian4.loadMathJax)();
      this.registerMarkdownPostProcessor((element, context) => {
        if (isValid(this, context.containerEl, context.sourcePath)) {
          generateMathLinks(this, element, context.sourcePath);
        }
      });
      this.app.workspace.onLayoutReady(() => {
        this.app.workspace.iterateRootLeaves((leaf) => {
          if (leaf.view.file && isValid(this, leaf.containerEl, leaf.view.file.path)) {
            buildLivePreview(this, leaf).then((livePreview) => {
              this.registerEditorExtension(livePreview);
            });
          }
        });
      });
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if (leaf.view.file && isValid(this, leaf.containerEl, leaf.view.file.path)) {
          buildLivePreview(this, leaf).then((livePreview) => {
            this.registerEditorExtension(livePreview);
          });
        }
      });
      this.apiAccounts = [];
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      this.addSettingTab(new MathLinksSettingTab(this.app, this));
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  getAPIAccount(userPlugin, blockPrefix = "^") {
    let account = this.apiAccounts.find((account2) => account2.manifest.id == userPlugin.manifest.id);
    if (account)
      return account;
    account = new MathLinksAPIAccount(this, userPlugin.manifest, blockPrefix);
    this.apiAccounts.push(account);
    return account;
  }
};
//# sourceMappingURL=data:application/json;base64,
